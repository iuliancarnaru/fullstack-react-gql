{"ast":null,"code":"import { dedupExchange, fetchExchange } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { MeDocument } from \"../generated/graphql\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nexport var createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: \"http://localhost:4000/graphql\",\n    fetchOptions: {\n      credentials: \"include\"\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      updates: {\n        Mutation: {\n          login: function login(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          },\n          logout: function logout(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function () {\n              return {\n                me: null\n              };\n            });\n          }\n        }\n      }\n    }), ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["/Users/iulian.carnaru/Desktop/fullstack-react-gql/web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","cacheExchange","MeDocument","betterUpdateQuery","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","login","_result","args","cache","info","query","result","errors","me","user","register","logout"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,aAAxB,QAA6C,MAA7C;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAGEC,UAHF,QAMO,sBANP;AAOA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,WAAD;AAAA,SAAuB;AACrDC,IAAAA,GAAG,EAAE,+BADgD;AAErDC,IAAAA,YAAY,EAAE;AACZC,MAAAA,WAAW,EAAE;AADD,KAFuC;AAKrDC,IAAAA,SAAS,EAAE,CACTV,aADS,EAETE,aAAa,CAAC;AACZS,MAAAA,OAAO,EAAE;AACPC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,KAAK,EAAE,eAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACrCb,YAAAA,iBAAiB,CACfY,KADe,EAEf;AACEE,cAAAA,KAAK,EAAEf;AADT,aAFe,EAKfW,OALe,EAMf,UAACK,MAAD,EAASD,KAAT,EAAmB;AACjB,kBAAIC,MAAM,CAACN,KAAP,CAAaO,MAAjB,EAAyB;AACvB,uBAAOF,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLG,kBAAAA,EAAE,EAAEF,MAAM,CAACN,KAAP,CAAaS;AADZ,iBAAP;AAGD;AACF,aAdc,CAAjB;AAgBD,WAlBO;AAoBRC,UAAAA,QAAQ,EAAE,kBAACT,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACxCb,YAAAA,iBAAiB,CACfY,KADe,EAEf;AACEE,cAAAA,KAAK,EAAEf;AADT,aAFe,EAKfW,OALe,EAMf,UAACK,MAAD,EAASD,KAAT,EAAmB;AACjB,kBAAIC,MAAM,CAACI,QAAP,CAAgBH,MAApB,EAA4B;AAC1B,uBAAOF,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLG,kBAAAA,EAAE,EAAEF,MAAM,CAACI,QAAP,CAAgBD;AADf,iBAAP;AAGD;AACF,aAdc,CAAjB;AAgBD,WArCO;AAuCRE,UAAAA,MAAM,EAAE,gBAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACtCb,YAAAA,iBAAiB,CACfY,KADe,EAEf;AAAEE,cAAAA,KAAK,EAAEf;AAAT,aAFe,EAGfW,OAHe,EAIf;AAAA,qBAAO;AAAEO,gBAAAA,EAAE,EAAE;AAAN,eAAP;AAAA,aAJe,CAAjB;AAMD;AA9CO;AADH;AADG,KAAD,CAFJ,EAsDTf,WAtDS,EAuDTL,aAvDS;AAL0C,GAAvB;AAAA,CAAzB","sourcesContent":["import { dedupExchange, fetchExchange } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport {\n  LoginMutation,\n  MeQuery,\n  MeDocument,\n  RegisterMutation,\n  LogoutMutation,\n} from \"../generated/graphql\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\" as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              {\n                query: MeDocument,\n              },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              {\n                query: MeDocument,\n              },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n        },\n      },\n    }),\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}