{"ast":null,"code":"var _jsxFileName = \"/Users/iulian.carnaru/Desktop/lireddit/web/src/pages/_app.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { ThemeProvider, CSSReset, ColorModeProvider } from \"@chakra-ui/core\";\nimport { createClient, Provider, dedupExchange, fetchExchange } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport theme from \"../theme\";\nimport { MeDocument } from \"../generated/graphql\";\nconst client = createClient({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        login: (result, args, cache, info) => {\n          cache.updateQuery({\n            query: MeDocument\n          });\n        }\n      }\n    }\n  }), fetchExchange]\n});\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return __jsx(Provider, {\n    value: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(ThemeProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(ColorModeProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, __jsx(CSSReset, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }), __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  })))));\n}\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/iulian.carnaru/Desktop/lireddit/web/src/pages/_app.tsx"],"names":["ThemeProvider","CSSReset","ColorModeProvider","createClient","Provider","dedupExchange","fetchExchange","cacheExchange","theme","MeDocument","client","url","fetchOptions","credentials","exchanges","updates","Mutation","login","result","args","cache","info","updateQuery","query","MyApp","Component","pageProps"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,iBAAlC,QAA2D,iBAA3D;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,EAAgDC,aAAhD,QAAqE,MAArE;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AAEA,MAAMC,MAAM,GAAGP,YAAY,CAAC;AAC1BQ,EAAAA,GAAG,EAAE,+BADqB;AAE1BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAFY;AAK1BC,EAAAA,SAAS,EAAE,CACTT,aADS,EAETE,aAAa,CAAC;AACZQ,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE,CAACC,MAAD,EAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,KAA+B;AACpCD,UAAAA,KAAK,CAACE,WAAN,CAAkB;AAAEC,YAAAA,KAAK,EAAEd;AAAT,WAAlB;AACD;AAHO;AADH;AADG,GAAD,CAFJ,EAWTH,aAXS;AALe,CAAD,CAA3B;;AAoBA,SAASkB,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AACvC,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEhB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEF,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD,eAAekB,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF,CADF,CADF;AAUD;;AAED,eAAeF,KAAf","sourcesContent":["import { ThemeProvider, CSSReset, ColorModeProvider } from \"@chakra-ui/core\";\nimport { createClient, Provider, dedupExchange, fetchExchange } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport theme from \"../theme\";\nimport { MeDocument } from \"../generated/graphql\";\n\nconst client = createClient({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\",\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          login: (result, args, cache, info) => {\n            cache.updateQuery({ query: MeDocument });\n          },\n        },\n      },\n    }),\n    fetchExchange,\n  ],\n});\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <Provider value={client}>\n      <ThemeProvider theme={theme}>\n        <ColorModeProvider>\n          <CSSReset />\n          <Component {...pageProps} />\n        </ColorModeProvider>\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}